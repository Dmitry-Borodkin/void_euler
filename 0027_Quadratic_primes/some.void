{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
P = 15000;


//---------------------------------------------------------------------
sieve: &*bool := v_undef();

pcount: &int := 0;

{   sieve := v_malloc(bool, P);

    memset(sieve, 0, P);

    for (i: &int := 3; i < P; i += 2)
    {
        sieve[i] := true;
    }

    sieve[2] := true;

    k: &int := v_undef();

    for (i: &int := 3; i < P; ++i)
    {
        if (sieve[i])
        {
            ++pcount;

            for (k: &int := 2*i; k < P; k += i)
            {
                sieve[k] := false;
            }
        }
    }
}

//---------------------------------------------------------------------
primes: &*int := v_undef();

{   primes := v_malloc(int, pcount);

    i: &int := 0;

    for (p: &int := 3; p < P; p += 2)
    {
        if (sieve[p]) primes[i++] := p;
    }
}


//---------------------------------------------------------------------
{   nmax:  &int := 0;
    abmax: &int := 0;

    for (bi: &int := 0; bi < pcount; ++bi)
    {
        b = primes[bi];

        if (b >= 1000) v_break();

        for (ai: &int := 0; ; ++ai)
        {
            a = primes[ai] - b - 1;

            if (a >= 1000) v_break();

            n: &int := 2;       //- Sic!

            for (; ; ++n)
            {
                p = n*n + a*n + b;

                if (p >= P)
                {
                    printf("got %d - abort!\n", p);

                    v_return();
                }

                if (!sieve[p]) v_break();

                if (nmax < n)
                {
                    nmax := n;

                    abmax := a * b;
                }
            }

//          printf("(%d, %d): %d\n", a, b, n);
        }
    }

    printf("%d %d\n", abmax, nmax);
}


//---------------------------------------------------------------------
{
    v_mfree(primes);
    v_mfree(sieve);
}

