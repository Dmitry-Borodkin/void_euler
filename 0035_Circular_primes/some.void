{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
sqrt: (float(64)) ~> float(64);
ceil: (float(64)) ~> float(64);


//---------------------------------------------------------------------
N = 1000000;


//---------------------------------------------------------------------
sieve = new bool[N];        defer delete[] sieve;

{   memset(sieve, 0, N);

    sieve[2] := true;

    for (i: &int := 3; i < N; i += 2)
    {
        sieve[i] := true;
    }

    R = (ceil(sqrt(N)) : int);

    for (i: &int := 3; i < R; i += 2)
    {
        if (sieve[i])
        {
            for (k: &int := i*i, i2 = 2*i; k < N; k += i2)
            {
                sieve[k] := false;
            }
        }
    }
}


//---------------------------------------------------------------------
check_circularity: (n: int, p: int) ~> bool
{
    order: &int := 1;

    for (i: &int := 1; i < n; ++i)
    {
        order *= 10;
    }

    pp: &int := p;

    for (i: &int := 0; i < n; ++i)
    {
        if (!sieve[pp]) v_return(false);

        pp := 10*(pp%order) + (pp/order);
    }

    v_return(true);
}


//---------------------------------------------------------------------
check_order: (n: int) ~> int
{
    order: &int := 1;

    for (i: &int := 1; i < n; ++i)
    {
        order *= 10;
    }

    s: &int := 0;

    for (p: &int := order; p < 10*order; ++p)
    {
        if (check_circularity(n, p))
        {
            ++s;

//          printf("%d\n", p);
        }
    }

    v_return(s);
}


//---------------------------------------------------------------------
{
    s: &int := 0;

    for (n: &int := 1; n <= 6; ++n)
    {
        s += check_order(n);
    }

    printf("sum: %d\n", s);
}


