{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
names_cmp: (l: *const void, r: *const void) -> int
{
    ls = *(l: *const *const char);
    rs = *(r: *const *const char);

    v_return(strcmp(ls, rs));
}


//---------------------------------------------------------------------
name_score: (s: *const char) -> int
{
    r: &int := 0;

    for (sp: & *const char := s; *sp; ++sp)
    {
        r += *sp - ('A' - 1);
    }

    v_return(r);
}


//---------------------------------------------------------------------
{
    res = v_alloca(v_std_any_t);
    v_initialize(res);
    defer v_terminate(res);

    {   f = v_fopen("names.txt", "rb");
        defer fclose(f);

        //-------------------------------------------------------------
        grm = v_alloca(v_peg_grammar_t);
        v_initialize(grm);
        defer v_terminate(grm);

        v_peg_get_grammar(grm);

        //-------------------------------------------------------------
        grammar grm
        {
        parsers:

            name_list = l:name_list ',' n:name      { mk_expr_list(l, n) }
                      / n:name                      { mk_expr_list(0, n) }
                      ;

            name_list is left-recursive;

            name = '\"' <[A-Z]*> '\"'               { mk_expr_string($1) }
                 ;
        }

        //-------------------------------------------------------------
        ctx = v_alloca(v_peg_context_t, 2);
        v_initialize(ctx, 2);
        defer v_terminate(ctx, 2);

        my_ctx    = ctx + 0;
        saved_ctx = ctx + 1;

        cur_pos: &int := v_undef();

        v_peg_make_context(my_ctx, (fgetc: *((*void) -> int)), f, grm);

        //-------------------------------------------------------------
        v_peg_get_context(saved_ctx);
        defer v_peg_set_context(saved_ctx);

        v_peg_set_context(my_ctx);

        v_peg_parse(res, v_quark_from_string("name_list"));

//      v_peg_parse(res, v_quark_from_string("expr_list"));     //- Slow...
    }

    //-----------------------------------------------------------------
    plst = v_std_any_get_pointer(v_ast_expr_list_t, res);

    count = v_list_get_size(plst);

//  printf("count: %lu\n", count);

    //-----------------------------------------------------------------
    names = v_malloc(*const char, count);
    defer v_free(names);

    for (i: &int := 0; i < count; ++i)
    {
        expr = v_list_get_item(plst, i);

        names[i] := v_ast_expr_string_get_string(expr);

//      printf("%s\n", names[i]);
    }


    //-----------------------------------------------------------------
    qsort(names, count, v_type_integer_get_width(intptr_t)/8, names_cmp);

    //-----------------------------------------------------------------
    total: &int := 0;

    for (i: &int := 0; i < count; ++i)
    {
        score = name_score(names[i]);

        total += (i+1) * score;

//      printf("%s: %d, %d\n", names[i], score, total);
    }

    //-----------------------------------------------------------------
    printf("%d\n", total);
}


