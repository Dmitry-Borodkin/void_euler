{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
sum_proper_divisors: (n: int) ~> int
{
    s: &int := 1;

    for (i: &int := 2; i < n; ++i)
    {
        i2 = i * i;

        if (i2 == n)  v_return(s + i);
        if (i2 > n)   v_return(s);

        if (n%i == 0) s += i + n/i;
    }

    v_return(s);    //- ?
}


//---------------------------------------------------------------------
is_abundant: (n: int) ~> bool
{
    v_return(n < sum_proper_divisors(n));
}


//---------------------------------------------------------------------
{   N = 30000;

    f = v_malloc(int(8), N);
    defer v_free(f);

    memset(f, 0, N);

    f_abundant = 1 << 0;
    f_sum2abs  = 1 << 1;

    //-----------------------------------------------------------------
    c: &int := 0;

    for (n: &int := 2; n < N; ++n)
    {
        if (is_abundant(n))
        {
            f[n] := f_abundant;

            ++c;
        }
    }

//  printf("c: %d\n", c);

    //-----------------------------------------------------------------
    {   ab = v_malloc(int, c);
        defer v_free(ab);

        i: &int := 0;

        for (n: &int := 2; n < N; ++n)
        {
            if (f[n])   ab[i++] := n;
        }

        //-------------------------------------------------------------
        for (i := 0; i < c; ++i)
        {
            for (j: &int := 0; j <= i; ++j)
            {
                num = ab[i] + ab[j];

                if (num >= N) v_break();

                f[num] |= f_sum2abs;
            }
        }
    }

    //-----------------------------------------------------------------
    sum: &int := 0;

    for (n: &int := 1; n < N; ++n)
    {
        if (!(f[n] & f_sum2abs))  sum += n;
    }

    //-----------------------------------------------------------------
    printf("%d\n", sum);
}


