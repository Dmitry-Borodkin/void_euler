{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
sqrt: (float(64)) ~> float(64);
ceil: (float(64)) ~> float(64);


//---------------------------------------------------------------------
N = 987654321 + 1;


//---------------------------------------------------------------------
sieve = new bool[N];        defer delete[] sieve;

{   memset(sieve, 0, N);

    sieve[2] := true;

    for (i: &int := 3; i < N; i += 2)
    {
        sieve[i] := true;
    }

    R = (ceil(sqrt(N)) : int);

    for (i: &int := 3; i < R; i += 2)
    {
        if (sieve[i])
        {
            for (k: &int := i*i, i2 = 2*i; k < N; k += i2)
            {
                sieve[k] := false;
            }
        }
    }
}


//---------------------------------------------------------------------
check: (p: int) ~> bool
{
    D: &bool[10] := 0;

    D[0] := true;

    for (pp: &int := p; pp; pp /= 10)
    {
        d = pp % 10;

        if (D[d]) v_return(false);      //- fail

        D[d] := true;
    }

    for (i: &int := 1; i < 10; ++i)
    {
        if (D[i]  &&  !D[i-1])  v_return(false);
    }

//  printf("%d\n", p);

    v_return(true);
}


//---------------------------------------------------------------------
{
    pmax: &int := 0;

    for (p: &int := 3; p < N; p += 2)
    {
        if (sieve[p] && check(p))   pmax := p;
    }

    printf("%d\n", pmax);
}


