{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
N = 9;

digits: &uint(8)[N] := 0;


//---------------------------------------------------------------------
pr_digits: () ~> void
{
    for (j: &int := 0; j < N; ++j)
    {
        printf("%d", digits[j]+1);
    }

    printf("\n");
}


//---------------------------------------------------------------------
get_num: (p0: int, p1: int) ~> int
{
    num: &int := 0;

    for (p: &int := p0; p < p1; ++p)
    {
        num := 10*num + digits[p] + 1;
    }

    v_return(num);
}


//---------------------------------------------------------------------
old_p: &int := 0;

sum: &int := 0;

check: () ~> void
{
//  pr_digits();

    for (i: &int := 1; i < N; ++i)
    {
        p = get_num(0, i);

        for (j: &int := i+1; j < N; ++j)
        {
            a = get_num(i, j);
            b = get_num(j, N);

            if (p == a*b)
            {
//              printf("%d == %d * %d\n", p, a, b);

                if (old_p != p)
                {
                    sum += p;

                    old_p := p;
                }
            }
        }
    }
}


//---------------------------------------------------------------------
permut: (i: int, flags: int) ~> void
{
    if (i == N)
    {
        check();

        v_return();
    }

    for (k: &int := 0; k < N; ++k)
    {
        if (!(flags & (1 << k)))
        {
            digits[i] := (k : uint(8));

            permut(i+1, flags | (1 << k));
        }
    }
}


//---------------------------------------------------------------------
{
    permut(0, 0);

    printf("\n%d\n", sum);
}


