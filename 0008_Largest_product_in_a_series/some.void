{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
data_init: (d: *int(8), s: *const char) -> *int(8)
{
    dst: & *int(8)     := d;
    src: & *const char := s;

    loop
    {
        c = *src++;

        if (!c) v_break();

        *dst++ := (c - '0' : int(8));
    }

    v_return(dst);
}


//---------------------------------------------------------------------
S = 1000;

data: &*int(8) := v_undef();

{   data := v_malloc(int(8), S);

    d = data;

    d = data_init(d, "73167176531330624919225119674426574742355349194934");
    d = data_init(d, "96983520312774506326239578318016984801869478851843");
    d = data_init(d, "85861560789112949495459501737958331952853208805511");
    d = data_init(d, "12540698747158523863050715693290963295227443043557");
    d = data_init(d, "66896648950445244523161731856403098711121722383113");
    d = data_init(d, "62229893423380308135336276614282806444486645238749");
    d = data_init(d, "30358907296290491560440772390713810515859307960866");
    d = data_init(d, "70172427121883998797908792274921901699720888093776");
    d = data_init(d, "65727333001053367881220235421809751254540594752243");
    d = data_init(d, "52584907711670556013604839586446706324415722155397");
    d = data_init(d, "53697817977846174064955149290862569321978468622482");
    d = data_init(d, "83972241375657056057490261407972968652414535100474");
    d = data_init(d, "82166370484403199890008895243450658541227588666881");
    d = data_init(d, "16427171479924442928230863465674813919123162824586");
    d = data_init(d, "17866458359124566529476545682848912883142607690042");
    d = data_init(d, "24219022671055626321111109370544217506941658960408");
    d = data_init(d, "07198403850962455444362981230987879927244284909188");
    d = data_init(d, "84580156166097919133875499200524063689912560717606");
    d = data_init(d, "05886116467109405077541002256983155200055935729725");
    d = data_init(d, "71636269561882670428252483600823257530420752963450");

//  printf("ok: %d\n", d == data+S);
}


//---------------------------------------------------------------------
{
//  N = 4;
    N = 13;

    printf("N: %d\n", N);

    p: &*int(8) := data + N;

    end = data + S;

    maxprod: &long_long := 0;

    loop
    {
        if (p == end) v_break();

        p0: &*int(8) := p - N;

        prod: &long_long := 1;

        loop
        {
            if (p0 == p) v_break();

            prod *= *p0;

            ++p0;
        }

        if (maxprod < prod) maxprod := prod;

        ++p;
    }

    printf("R: %lld\n", maxprod);
}


//---------------------------------------------------------------------
{
    v_mfree(data);
}

