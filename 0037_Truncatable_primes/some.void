{   v_import("imports.void");
}

{   enable_imports(); }


//---------------------------------------------------------------------
sqrt: (float(64)) -> float(64);
ceil: (float(64)) -> float(64);


//---------------------------------------------------------------------
N = 1000000;


//---------------------------------------------------------------------
sieve: &*bool := {};

{   sieve := v_malloc(bool, N);

    memset(sieve, 0, N);

    sieve[2] := true;

    for (i: &int := 3; i < N; i += 2)
    {
        sieve[i] := true;
    }

    R = (ceil(sqrt(N)) : int);

    for (i: &int := 3; i < R; i += 2)
    {
        if (sieve[i])
        {
            for (k: &int := i*i, i2 = 2*i; k < N; k += i2)
            {
                sieve[k] := false;
            }
        }
    }
}


//---------------------------------------------------------------------
check_to_left: (n: int) -> bool
{
    for (nn: &int := n; nn; nn /= 10)
    {
        if (!sieve[nn]) v_return(false);
    }

    v_return(true);
}

//---------------------------------------------------------------------
check_to_right: (n: int) -> bool
{
    for (M: &int := 10; M < n; M *= 10)
    {
        if (!sieve[n % M])  v_return(false);
    }

    v_return(true);
}


//---------------------------------------------------------------------
{
    sum: &int := 0;

    for (n: &int := 11; n < N; n += 2)
    {
        if (check_to_left(n)  &&  check_to_right(n))
        {
            sum += n;

//          printf("%d\n", n);
        }
    }

    printf("sum: %d\n", sum);
}


//---------------------------------------------------------------------
{
    v_free(sieve);
}


